#!/usr/bin/env node

/**
 * watchproc - Display CPU and memory usage for a specified process
 * 
 * Usage: watchproc <pid>
 */

const { execSync } = require('child_process');
const fs = require('fs');

function watchproc(pid) {
  // Validate PID argument
  if (!pid || isNaN(parseInt(pid))) {
    console.error('smash error: watchproc: invalid arguments');
    process.exit(1);
  }

  pid = parseInt(pid);
  
  try {
    // Check if process exists by trying to read its stat file
    if (!fs.existsSync(`/proc/${pid}/stat`)) {
      console.error(`smash error: watchproc: pid ${pid} does not exist`);
      process.exit(1);
    }

    // Get CPU usage
    // First, get the process stat info
    const statContent = fs.readFileSync(`/proc/${pid}/stat`, 'utf8');
    const statFields = statContent.split(' ');
    
    // Get process utime and stime (user and system CPU time)
    const utime = parseInt(statFields[13]);
    const stime = parseInt(statFields[14]);
    
    // Get total system uptime
    const uptime = parseFloat(fs.readFileSync('/proc/uptime', 'utf8').split(' ')[0]);
    
    // Get process start time (in clock ticks since boot)
    const starttime = parseInt(statFields[21]);
    
    // Get number of clock ticks per second
    const clockTicks = parseInt(execSync('getconf CLK_TCK').toString());
    
    // Calculate CPU usage percentage
    const processUptime = uptime - (starttime / clockTicks);
    const cpuTime = (utime + stime) / clockTicks;
    const cpuUsage = (cpuTime / processUptime) * 100;
    
    // Get memory usage
    const statusContent = fs.readFileSync(`/proc/${pid}/status`, 'utf8');
    const vmRSS = statusContent
      .split('\n')
      .find(line => line.startsWith('VmRSS'))
      ?.split(':')[1]
      ?.trim()
      ?.split(' ')[0];
    
    // Convert from KB to MB
    const memoryUsageMB = vmRSS ? (parseInt(vmRSS) / 1024).toFixed(1) : 0;
    
    // Output the result
    console.log(`PID: ${pid} | CPU Usage: ${cpuUsage.toFixed(1)}% | Memory Usage: ${memoryUsageMB} MB`);
    
  } catch (error) {
    // If any other error occurs during processing
    if (error.code === 'ENOENT') {
      console.error(`smash error: watchproc: pid ${pid} does not exist`);
    } else {
      console.error(`smash error: watchproc: ${error.message}`);
    }
    process.exit(1);
  }
}

// Get the PID from command line arguments
const pid = process.argv[2];
watchproc(pid);